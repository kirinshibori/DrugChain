// SPDX-License-Identifier: MIT

pragma solidity >=0.6.00;

// Importing the necessary sol files
import "../core/Ownable.sol";
import "../access/roles/RetailerRole.sol";
import "../access/roles/DistributorRole.sol";
import "../access/roles/SupplierRole.sol";
import "../access/roles/ManufacturerRole.sol";
import "../access/roles/InspectorRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    SupplierRole,
    InspectorRole,
    DistributorRole,
    RetailerRole,
    ManufacturerRole
{
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku_cnt;

    // ingredient_upc -> ingredientItem
    mapping(uint256 => IngredientItem) ingredientItems;
    // drug_upc -> drugItems
    mapping(uint256 => DrugItem) drugItems;
    // drug_upc -> ingredient_upc[]
    mapping(uint256 => uint256[]) drugIngredient;

    // Define enum 'State' with the following values:
    enum IngredientState {
        Sourced, 
        Produced, 
        Audited, 
        Processed
    }
    IngredientState constant defaultIngredientState = IngredientState.Sourced;

    enum DrugState {
        Created,
        Refined,
        Manufactured,
        Certified,
        Packed,
        Distributed,
        Purchased
    }
    DrugState constant defaultDrugState = DrugState.Created;

    // Define a struct 'IngredientItem' with the following fields:
    struct IngredientItem {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Supplier, goes on the package, can be verified by the Retailer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through stages
        address originSupplierID; // Metamask-Ethereum address of the Supplier
        string originSupplierName; // Supplier Name
        string originSupplierInformation; // Supplier Information
        string originSupplierLatitude; // Supplier Latitude
        string originSupplierLongitude; // Supplier Longitude
        string produceNotes; // Produce Notes
        string auditNotes; // Audit Notes
        IngredientState itemState; // Product State as represented in the enum above
    }

    // Define a struct 'DrugItem' with the following fields:
    struct DrugItem {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Retailer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through stages
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        address manufacturerID; // Metamask-Ethereum address of the Manufacturer
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        string certifyNotes; // Certify Notes
        DrugState itemState; // Product State as represented in the enum above
    }

    // Define events of Ingredient
    event IngredientSourced(uint256 ingredientUpc);
    event IngredientProduced(uint256 ingredientUpc);
    event IngredientAudited(uint256 ingredientUpc);
    event IngredientProcessed(uint256 ingredientUpc);

    // Define events of Drugs
    event DrugCreated(uint256 drugUpc);
    event DrugRefined(uint256 drugUpc, uint256 ingredientUpc);
    event DrugManufactured(uint256 drugUpc);
    event DrugPacked(uint256 drugUpc);
    event DrugCertified(uint256 drugUpc);
    event DrugDistributed(uint256 drugUpc);
    event DrugPurchased(uint256 drugUpc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "verifyCaller: unexpected caller");
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price, "paidEnough");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _drugUpc) {
        _;
        uint256 _price = drugItems[_drugUpc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        payable(drugItems[_drugUpc].retailerID).transfer(amountToReturn);
    }

    // Define a modifier that checks if an ingredientItem.state of a upc is Sourced
    modifier isSourced(uint256 _ingredientUpc) {
        require(
            ingredientItems[_ingredientUpc].itemState ==
                IngredientState.Sourced,
            "not Sourced"
        );
        _;
    }

    // Define a modifier that checks if an ingredientItem.state of a upc is Produced
    modifier isProduced(uint256 _ingredientUpc) {
        require(
            ingredientItems[_ingredientUpc].itemState ==
                IngredientState.Produced,
            "not Produced"
        );
        _;
    }

    // Define a modifier that checks if an ingredientItem.state of a upc is Audited
    modifier isAudited(uint256 _ingredientUpc) {
        require(
            ingredientItems[_ingredientUpc].itemState ==
                IngredientState.Audited,
            "not Audited"
        );
        _;
    }

    // Define a modifier that checks if an ingredientItem.state of a upc is Processed
    modifier isProcessed(uint256 _ingredientUpc) {
        require(
            ingredientItems[_ingredientUpc].itemState ==
                IngredientState.Processed,
            "not Processed"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Created
    modifier isCreated(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Created,
            "not Created"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Refined
    modifier isRefined(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Refined,
            "not Refined"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Manufactured
    modifier isManufactured(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Manufactured,
            "not Manufactured"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Packed
    modifier isPacked(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Packed,
            "not Packed"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Certified
    modifier isCertified(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Certified,
            "not Certified"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Distributed
    modifier isDistributed(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Distributed,
            "not Distributed"
        );
        _;
    }

    // Define a modifier that checks if an drugItem.state of a upc is Purchased
    modifier isPurchased(uint256 _drugUpc) {
        require(
            drugItems[_drugUpc].itemState == DrugState.Purchased,
            "not Purchased"
        );
        _;
    }

    // In the constructor
    // set 'sku' to 1
    // set 'upc' to 1
    constructor() public payable {
        sku_cnt = 1;
    }

    // Transfer Eth to owner and terminate contract
    function kill() public onlyOwner {
        selfdestruct(payable(owner()));
    }

    // Define a function 'ingredientSourceItem' that allows a Supplier to mark an item 'Sourced'
    function ingredientSourceItem(
        uint256 _ingredientUpc,
        address _originSupplierID,
        string calldata _originSupplierName,
        string calldata _originSupplierInformation,
        string calldata _originSupplierLatitude,
        string calldata _originSupplierLongitude
    ) public onlySupplier {
        // Add the new item as part of Produce
        ingredientItems[_ingredientUpc].sku = sku_cnt;
        ingredientItems[_ingredientUpc].upc = _ingredientUpc;
        ingredientItems[_ingredientUpc].ownerID = msg.sender;
        ingredientItems[_ingredientUpc].originSupplierID = _originSupplierID;
        ingredientItems[_ingredientUpc]
            .originSupplierName = _originSupplierName;
        ingredientItems[_ingredientUpc]
            .originSupplierInformation = _originSupplierInformation;
        ingredientItems[_ingredientUpc]
            .originSupplierLatitude = _originSupplierLatitude;
        ingredientItems[_ingredientUpc]
            .originSupplierLongitude = _originSupplierLongitude;
        // Update state
        ingredientItems[_ingredientUpc].itemState = IngredientState.Sourced;
        // Increment sku
        sku_cnt = sku_cnt + 1;
        // Emit the appropriate event
        emit IngredientSourced(_ingredientUpc);
    }

    // Define a function 'ingredientProduceItem' that allows a Supplier to mark an item 'Produced'
    function ingredientProduceItem(
        uint256 _ingredientUpc,
        string calldata _produceNotes
    ) public onlySupplier isSourced(_ingredientUpc) {
        // Add the new item as part of Produce
        ingredientItems[_ingredientUpc].ownerID = msg.sender;
        ingredientItems[_ingredientUpc].produceNotes = _produceNotes;
        // Update state
        ingredientItems[_ingredientUpc].itemState = IngredientState.Produced;
        // Emit the appropriate event
        emit IngredientProduced(_ingredientUpc);
    }

    // Define a function 'ingredientAuditItem' that allows a Inspector to mark an item 'Audited'
    function ingredientAuditItem(
        uint256 _ingredientUpc,
        string calldata _auditNotes
    ) public onlyInspector isProduced(_ingredientUpc) {
        // Add the new item as part of Produce
        ingredientItems[_ingredientUpc].auditNotes = _auditNotes;
        // Update state
        ingredientItems[_ingredientUpc].itemState = IngredientState.Audited;
        // Emit the appropriate event
        emit IngredientAudited(_ingredientUpc);
    }

    // Define a function 'ingredientProcessItem' that allows a Supplier to mark an item 'Processed'
    function ingredientProcessItem(uint256 _ingredientUpc)
        public
        onlySupplier
        isAudited(_ingredientUpc)
    // verifyCaller(ingredientItems[_ingredientUpc].ownerID) // Call modifier to verify caller of this function
    {
        // Update the appropriate fields
        ingredientItems[_ingredientUpc].itemState = IngredientState.Processed;
        // Emit the appropriate event
        emit IngredientProcessed(_ingredientUpc);
    }

    function drugCreateItem(uint256 _ingredientUpc, uint256 _productID)
        public
        onlyManufacturer
    {
        // Add the new item as part of Produce
        drugItems[_ingredientUpc].sku = sku_cnt;
        drugItems[_ingredientUpc].upc = _ingredientUpc;
        drugItems[_ingredientUpc].productID = _productID;
        drugItems[_ingredientUpc].ownerID = msg.sender;
        // Update state
        drugItems[_ingredientUpc].itemState = DrugState.Created;
        // Increment sku
        sku_cnt = sku_cnt + 1;
        // Emit the appropriate event
        emit DrugCreated(_ingredientUpc);
    }

    function drugRefineItem(uint256 _drugUpc, uint256 _ingredientUpc)
        public
        onlyManufacturer
        verifyCaller(drugItems[_drugUpc].ownerID)
    {
        // Take ownership of ingredient
        ingredientItems[_drugUpc].ownerID = msg.sender;
        // Refine the '_drugUpc' drug with '_ingredientUpc' ingredient
        drugIngredient[_drugUpc].push(_ingredientUpc);
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Refined;
        // Emit the appropriate event
        emit DrugRefined(_drugUpc, _ingredientUpc);
    }

    function drugManufactureItem(
        uint256 _drugUpc,
        string calldata _productNotes,
        uint256 _productPrice
    )
        public
        onlyManufacturer
        verifyCaller(drugItems[_drugUpc].ownerID)
        isRefined(_drugUpc)
    {
        drugItems[_drugUpc].manufacturerID = msg.sender;
        drugItems[_drugUpc].productNotes = _productNotes;
        drugItems[_drugUpc].productPrice = _productPrice;
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Manufactured;
        // Emit the appropriate event
        emit DrugManufactured(_drugUpc);
    }

    function drugCertifyItem(uint256 _drugUpc, string calldata _certifyNotes)
        public
        onlyInspector
        isManufactured(_drugUpc)
    {
        drugItems[_drugUpc].certifyNotes = _certifyNotes;
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Certified;
        // Emit the appropriate event
        emit DrugCertified(_drugUpc);
    }

    function drugPackItem(uint256 _drugUpc)
        public
        onlyManufacturer
        verifyCaller(ingredientItems[_drugUpc].ownerID)
        isCertified(_drugUpc)
    {
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Packed;
        // Emit the appropriate event
        emit DrugPacked(_drugUpc);
    }

    function drugDistributeItem(uint256 _drugUpc)
        public
        onlyDistributor
        isPacked(_drugUpc)
    {
        drugItems[_drugUpc].distributorID = msg.sender;
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Distributed;
        // Emit the appropriate event
        emit DrugDistributed(_drugUpc);
    }

    function drugPurchaseItem(uint256 _drugUpc)
        public
        payable
        onlyRetailer
        isDistributed(_drugUpc)
        paidEnough(drugItems[_drugUpc].productPrice)
        checkValue(_drugUpc)
    {
        drugItems[_drugUpc].ownerID = msg.sender;
        drugItems[_drugUpc].retailerID = msg.sender;
        // Update state
        drugItems[_drugUpc].itemState = DrugState.Purchased;
        // Transfer money to manufacturer
        uint256 price = drugItems[_drugUpc].productPrice;
        payable(drugItems[_drugUpc].manufacturerID).transfer(price);
        // Emit the appropriate event
        emit DrugPurchased(_drugUpc);
    }

    // Functions to fetch data
    function fetchDrugItemBufferOne(uint256 _drugUpc)
        external
        view
        returns (
            uint256 sku,
            uint256 upc,
            address ownerID,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            address manufacturerID,
            address distributorID,
            address retailerID,
            string memory certifyNotes,
            uint256[] memory ingredient,
            uint256 itemState
        )
    {
        sku = drugItems[_drugUpc].sku;
        upc = drugItems[_drugUpc].upc;
        ownerID = drugItems[_drugUpc].ownerID;
        productID = drugItems[_drugUpc].productID;
        productNotes = drugItems[_drugUpc].productNotes;
        productPrice = drugItems[_drugUpc].productPrice;
        manufacturerID = drugItems[_drugUpc].manufacturerID;
        distributorID = drugItems[_drugUpc].distributorID;
        retailerID = drugItems[_drugUpc].retailerID;
        certifyNotes = drugItems[_drugUpc].certifyNotes;
        ingredient = drugIngredient[_drugUpc];
        itemState = uint256(drugItems[_drugUpc].itemState);
        return (
            sku,
            upc,
            ownerID,
            productID,
            productNotes,
            productPrice,
            manufacturerID,
            distributorID,
            retailerID,
            certifyNotes,
            ingredient,
            itemState
        );
    }

    // Functions to fetch data
    function fetchIngredientItemBufferOne(uint256 _ingredientUpc)
        public
        view
        returns (
            uint256 sku,
            uint256 upc,
            address ownerID,
            address originSupplierID,
            string memory originSupplierName,
            string memory originSupplierInformation,
            string memory originSupplierLatitude,
            string memory originSupplierLongitude
        )
    {
        sku = ingredientItems[_ingredientUpc].sku;
        upc = ingredientItems[_ingredientUpc].upc;
        ownerID = ingredientItems[_ingredientUpc].ownerID;
        originSupplierID = ingredientItems[_ingredientUpc].originSupplierID;
        originSupplierName = ingredientItems[_ingredientUpc].originSupplierName;
        originSupplierInformation = ingredientItems[_ingredientUpc]
            .originSupplierInformation;
        originSupplierLatitude = ingredientItems[_ingredientUpc]
            .originSupplierLatitude;
        originSupplierLongitude = ingredientItems[_ingredientUpc]
            .originSupplierLongitude;
        return (
            sku,
            upc,
            ownerID,
            originSupplierID,
            originSupplierName,
            originSupplierInformation,
            originSupplierLatitude,
            originSupplierLongitude
        );
    }

    // Functions to fetch data
    function fetchIngredientItemBufferTwo(uint256 _ingredientUpc)
        public
        view
        returns (
            string memory produceNotes,
            string memory auditNotes,
            uint256 itemState
        )
    {
        produceNotes = ingredientItems[_ingredientUpc].produceNotes;
        auditNotes = ingredientItems[_ingredientUpc].auditNotes;
        itemState = uint256(ingredientItems[_ingredientUpc].itemState);
        return (produceNotes, auditNotes, itemState);
    }
}
